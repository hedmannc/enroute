@using EnrouteUI.Services
@using System.Text.Json
@inherits LayoutComponentBase
@inject IHttpClientFactory http
@inject TokenProvider tokenprovider


<div class="sidebar">
    <NavMenu />
</div>


<AuthorizeView>
    <Authorized>
        <p>Hello, @context.User.Identity?.Name!</p>
    </Authorized>
    <NotAuthorized>
        <div>
            Email:<input @bind="email" />
        </div>
        <div>
            Password:   <input type="password" @bind="password" />
        </div>
        <div>
            <button @onclick="SignIn">Sign in</button>
        </div>
        <p>You're not authorized.</p>
    </NotAuthorized>
</AuthorizeView>

<div class="main">
    
    <div class="content px-4">
        @Body
    </div>
</div>


@code {
    public string email = string.Empty;
    public string password = string.Empty;


    private async Task SignIn()
    {
        var httpclient = http.CreateClient("Auth");

        var myObject = JsonSerializer.Serialize(new { email = email, password = password });




        var content = new StringContent(myObject.ToString());





        var response = await httpclient.PostAsync("account/login",content);
        if (response.IsSuccessStatusCode)
        {
            var token = await response.Content.ReadAsStringAsync();


            tokenprovider = JsonSerializer.Deserialize<TokenProvider>(token);

            if(tokenprovider != null)
            {
                httpclient.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", tokenprovider.accesstoken);
                
            }
           
            var result = await httpclient.GetAsync("profile");

            var userprofile = new UserProfile();

            userprofile = JsonSerializer.Deserialize<UserProfile>(result.Content.ReadAsStream());
            //add some check here

            if(userprofile != null)
            {
                if(userprofile.UserName != null)
                {
                    var identity = new ClaimsIdentity(
           new[]
            {
                new Claim(ClaimTypes.Name,  userprofile.UserName),
                        },
         "Custom Authentication");

                    var newUser = new ClaimsPrincipal(identity);
                    new AuthenticationService().CurrentUser = newUser;
                }
                    
                }
                
    
            
        }
    }
}