
@using System.Text.Json
@using System.Text
@using static MyAuthenticationStateProvider
@using Blazored.LocalStorage
@inherits LayoutComponentBase
@inject IHttpClientFactory http
@inject TokenProvider tokenprovider
@inject MyAuthenticationStateProvider _auth
@inject IJSRuntime js
@inject ILocalStorageService sessionStorageService

<div class="sidebar">
    <NavMenu />
</div>


<div class="main">





    <div class="topbar px-4">
        <CascadingAuthenticationState>
            <AuthorizeView>
                <Authorized>
                    <p>Hello, @context.User.Identity?.Name!</p>

                    <div>
                        <button @onclick="SignOut">Sign out</button>
                    </div>

                </Authorized>
                <NotAuthorized>
                    <div>
                        Email:<input @bind="email" />
                    </div>
                    <div>
                        Password:   <input type="password" @bind="password" />
                    </div>
                    <div>
                        <button @onclick="SignIn">Sign in</button>
                    </div>

                    <div>
                        <button @onclick="SignIn">Register</button>
                    </div>
                </NotAuthorized>
            </AuthorizeView>
        </CascadingAuthenticationState>

    </div>

    <div class="content px-4">
        @Body
    </div>
    
    
</div>


@code {
    public string email = string.Empty;
    public string password = string.Empty;
    public HttpClient httpclient = new();


    protected override async void OnInitialized()
    {
        httpclient = http.CreateClient("Auth");

        var token = await sessionStorageService.GetItemAsStringAsync("token");

        var email = await sessionStorageService.GetItemAsStringAsync("email");

        if(token != null && email != null)
        {
            httpclient.DefaultRequestHeaders.Add("Authorization", "Bearer " + token);

            var response2 = await httpclient.GetAsync("UserMaintenance/getUserRole");

            if (response2.IsSuccessStatusCode)
            {
                var role = await response2.Content.ReadAsStringAsync();

                _auth.SignIn(email, role);
            }
            else
            {
                await sessionStorageService.RemoveItemAsync("token");

                await sessionStorageService.RemoveItemAsync("email");
            }




        }

    }


    private async void SignOut()
    {
        email = string.Empty;
        password = string.Empty;

        await sessionStorageService.RemoveItemAsync("token");

        await sessionStorageService.RemoveItemAsync("email");
        _auth.SignOut();

    }


    private async Task SignIn()
    {


        var myObject = JsonSerializer.Serialize(new { email = email, password = password });




        var content = new StringContent(myObject.ToString(), Encoding.UTF8, "application/json");


        try
        {
            var response = await httpclient.PostAsync("login", content);
            if (response.IsSuccessStatusCode)
            {
                var token = await response.Content.ReadAsStringAsync();


                tokenprovider = JsonSerializer.Deserialize<TokenProvider>(token);

                if (tokenprovider != null)
                {


                    //httpclient.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", tokenprovider.accessToken);


                    httpclient.DefaultRequestHeaders.Add("Authorization", "Bearer " + tokenprovider.accessToken);




                    var response2 = await httpclient.GetAsync("UserMaintenance/getUserRole");

                    if (response.IsSuccessStatusCode)
                    {
                        var role = await response2.Content.ReadAsStringAsync();

                        await sessionStorageService.SetItemAsStringAsync("email", email);

                        if (tokenprovider.accessToken != null)
                        {
                            await sessionStorageService.SetItemAsStringAsync("token", tokenprovider.accessToken);
                        }

                       

                        _auth.SignIn(email, role);

                    }


                } 



            }
            else
            {
                await js.InvokeVoidAsync("showFailToast", "Incorrect Credentials");
            }
        }
        catch (Exception e)
        {
            await js.InvokeVoidAsync("showFailToast", $"Failed to login {e.Message}");
        }



    }
    

    private async Task register()
    {
   

        var myObject = JsonSerializer.Serialize(new { email = email, password = password });




        var content = new StringContent(myObject.ToString(), Encoding.UTF8, "application/json");


        try
        {
            var response = await httpclient.PostAsync("register", content);
            if (response.IsSuccessStatusCode)
            {
                var token = await response.Content.ReadAsStringAsync();


                tokenprovider = JsonSerializer.Deserialize<TokenProvider>(token);

                if (tokenprovider != null)
                {


                    //httpclient.DefaultRequestHeaders.Add("Authorization", "Bearer " + tokenprovider.accessToken);

                    httpclient.DefaultRequestHeaders.Add("Authorization", "Bearer " + tokenprovider.accessToken);


                     var response2 = await httpclient.GetAsync("UserMaintenance/getUserRole");

                if (response.IsSuccessStatusCode)
                {
                    var role   = await response2.Content.ReadAsStringAsync();
                       
                       
                    await sessionStorageService.SetItemAsStringAsync("email", email);

                       
                        if (tokenprovider.accessToken != null)
                        {
                            await sessionStorageService.SetItemAsStringAsync("token", tokenprovider.accessToken);
                        }

                    _auth.SignIn(email,role);

                }

              }

               

               




            }
            else
            {
                await js.InvokeVoidAsync("showFailToast", "Registration Failed, User already exist");
            }
        }
        catch (Exception)
        {
            await js.InvokeVoidAsync("showFailToast", "Registration Failed");
        }



    }
}