
@using System.Text.Json
@using System.Text
@using static MyAuthenticationStateProvider
@using Blazored.LocalStorage
@using EnrouteAppLibrary.Models
@inherits LayoutComponentBase
@inject IHttpClientFactory http
@inject TokenProvider tokenprovider
@inject MyAuthenticationStateProvider _auth
@inject IJSRuntime js
@inject ILocalStorageService sessionStorageService






<div class="bb-page">


  <Sidebar @ref="sidebar"
             IconName="IconName.PinMap"
             Title="Enroute"
             DataProvider="SidebarDataProvider"/>


    <Offcanvas @ref="offcanvas">
        <BodyTemplate>

            <CascadingAuthenticationState>
                <AuthorizeView>
                    <Authorized>
                        <label>Hello, @context.User.Identity?.Name!</label>
                        &nbsp;
                        &nbsp;
                        <div>
                            <button class="btn btn-danger btn-lg btn-block" @onclick="SignOut">Sign out</button>
                        </div>

                    </Authorized>
                    <NotAuthorized>
                        <!--   <div>
                                Email:<input @bind="email" />
                            </div>
                            <div>
                                Password:   <input type="password" @bind="password" />
                            </div> -->
                        <div>
                            <button class="btn btn-primary btn-lg btn-block" @onclick="(async () => {ShowModal(true,true);  await OnHideOffcanvasClick(); Hide();})">Sign in</button>
                        </div>
                        &nbsp;
                        &nbsp;
                        <div>
                            <button class="btn btn-primary btn-lg btn-block" @onclick="( async () => {ShowModal(false,true); await OnHideOffcanvasClick();  Hide(); })">Register</button>
                        </div>
                    </NotAuthorized>
                </AuthorizeView>
            </CascadingAuthenticationState>
            </BodyTemplate>
    </Offcanvas>


<main>


        <div class="bb-top-row px-4 d-flex justify-content-end top-row">

     
        <CascadingAuthenticationState>
            <AuthorizeView>
                <Authorized>
                    <label>Hello, @context.User.Identity?.Name!</label>
                        &nbsp;
                        &nbsp;
                    <div>
                        <button class="btn btn-danger btn-lg btn-block"@onclick="SignOut">Sign out</button>
                    </div>

                </Authorized>
                <NotAuthorized>
                <!--   <div>
                        Email:<input @bind="email" />
                    </div>
                    <div>
                        Password:   <input type="password" @bind="password" />
                    </div> -->
                    <div>
                            <button class="btn btn-primary btn-lg btn-block" @onclick="(() => {ShowModal(true,true);})">Sign in</button>
                    </div>
                    &nbsp;
                    &nbsp;
                    <div>
                            <button class="btn btn-primary btn-lg btn-block" @onclick="(() => {ShowModal(false,true);})">Register</button>
                    </div>
                </NotAuthorized>
            </AuthorizeView>
        </CascadingAuthenticationState>
            
            <i class="bi bi-arrow-left arrow" @onclick="(async() => {await OnShowOffcanvasClick();})">Show More</i>

    </div>

       

        <article class="content px-4">
            <div class="py-2">@Body</div>
        </article>
    
    
</main>
</div>



@if (signin)
{
    <div class="loading">

        <!--<div Class="spinner">

            <div>
                Email:<input @bind="email" />
            </div>
            <div>
                Password:   <input type="password" @bind="password" />
            </div>
            <div>
                <button @onclick="SignIn">Sign in</button>
            </div>

            <div>
                <button @onclick="(() => {ShowModal(true,false);})">Cancel</button>
            </div>

        </div> -->


        <div class="container py-5 h-100">
            <div class="row d-flex justify-content-center align-items-center h-100">
                <div class="col-12 col-md-8 col-lg-6 col-xl-5">
                    <div class="card shadow-2-strong" style="border-radius: 1rem;">
                        <div class="card-body p-5 text-center">

                            <h3 class="mb-5">Sign In</h3>

                            <div data-mdb-input-init class="form-outline mb-4">
                                <input type="email" @bind="email" id="typeEmailX-2" class="form-control form-control-lg" />
                                <label class="form-label" for="typeEmailX-2">Email</label>
                            </div>

                            <div data-mdb-input-init class="form-outline mb-4">
                                <input type="password" @bind="password" id="typePasswordX-2" class="form-control form-control-lg" />
                                <label class="form-label" for="typePasswordX-2">Password</label>
                            </div>



                            <button data-mdb-button-init data-mdb-ripple-init class="btn btn-primary btn-lg btn-block" @onclick="SignIn" type="submit">Login</button>

                            <button data-mdb-button-init data-mdb-ripple-init class="btn btn-danger btn-lg btn-block" @onclick="(() => {ShowModal(true,false);})" type="submit">Cancel</button>


                        </div>
                    </div>
                </div>
            </div>
        </div>

    </div>


}

@if (reg)
{
    <div class="loading">

        <!--<div Class="spinner">

            <div>
                Email:<input @bind="email" />
            </div>
            <div>
                Password:   <input type="password" @bind="password" />
            </div>
            <div>
                <button @onclick="register">Register</button>
            </div>

            <div>
                <button @onclick="(() => {ShowModal(false,false);})">Cancel</button>
            </div>


        </div>-->


        <div class="container py-5 h-100">
            <div class="row d-flex justify-content-center align-items-center h-100">
                <div class="col-12 col-md-8 col-lg-6 col-xl-5">
                    <div class="card shadow-2-strong" style="border-radius: 1rem;">
                        <div class="card-body p-5 text-center">

                            <h3 class="mb-5">Register</h3>

                            <div data-mdb-input-init class="form-outline mb-4">
                                <input type="email" @bind="email" id="typeEmailX-2" class="form-control form-control-lg" />
                                <label class="form-label" for="typeEmailX-2">Email</label>
                            </div>

                            <div data-mdb-input-init class="form-outline mb-4">
                                <input type="password" @bind="password" id="typePasswordX-2" class="form-control form-control-lg" />
                                <label class="form-label" for="typePasswordX-2">Password</label>
                            </div>

                            <div data-mdb-input-init class="form-outline mb-4">
                                <input type="password" @bind="confirmpassword" id="typePasswordX-2" class="form-control form-control-lg" />
                                <label class="form-label" for="typePasswordX-2">Confirm Password</label>
                            </div>


                            <button data-mdb-button-init data-mdb-ripple-init class="btn btn-primary btn-lg btn-block" @onclick="register" type="submit">Register</button>

                            <button data-mdb-button-init data-mdb-ripple-init class="btn btn-danger btn-lg btn-block" @onclick="(() => {ShowModal(false,false);})" type="submit">Cancel</button>


                        </div>
                    </div>
                </div>
            </div>
        </div>

    </div>
}


@if (visible)
{
    <div class="loading">

        <div Class="spinner">

            <Spinner Type="SpinnerType.Border" Size="SpinnerSize.ExtraLarge" />

        </div>

    </div>
}






@code {



    public string email = string.Empty;
    public string password = string.Empty;
    public string confirmpassword = string.Empty;
    public HttpClient httpclient = new();

    Sidebar? sidebar;
    IEnumerable<NavItem>? navItems = null;

    private bool visible = false;

    private bool signin = false;

    private bool reg = false;

    private Offcanvas offcanvas = default!;

    private async Task OnShowOffcanvasClick() {
        await offcanvas.ShowAsync();
        Hide();
    }

    private async Task OnHideOffcanvasClick() {

        await offcanvas.HideAsync();

    }



    private void Show() {
        visible = true;
    }

    private void Hide()
    {
        visible = false;
    }

    private void ShowModal(bool sign, bool show)
    {
        if (!show)
        {

            clearLogin();

        }


        if (sign)
        {
            signin = show;
        }
        else
        {
            reg = show;
        }

    }

    private void clearLogin()
    {
        password = string.Empty;
        confirmpassword = string.Empty;
        email = string.Empty;

    }

    private async Task<SidebarDataProviderResult> SidebarDataProvider(SidebarDataProviderRequest request)
    {
        if (navItems is null)
            navItems = GetNavItems();

        return await Task.FromResult(request.ApplyTo(navItems));
    }

    private IEnumerable<NavItem> GetNavItems()
    {
        navItems = new List<NavItem>
        {
            new NavItem { Id = "1", Href = "/", IconName = IconName.HouseDoorFill, Text = "Home", Match=NavLinkMatch.All},
            //new NavItem { Id = "2", Href = "/counter", IconName = IconName.PlusSquareFill, Text = "Counter"},
            //new NavItem { Id = "3", Href = "/weather", IconName = IconName.Table, Text = "Fetch Data"},

        };

        return navItems;
    }


    /* protected override async void OnInitialized()
    {




     }*/


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await LoginFromSession();

    }


    private async Task LoginFromSession()
    {
        try
        {
            Show();

            httpclient = http.CreateClient("Auth");

            var token = await sessionStorageService.GetItemAsStringAsync("token");

            var email = await sessionStorageService.GetItemAsStringAsync("email");

            if (token != null && email != null)
            {
                httpclient.DefaultRequestHeaders.Remove("Authorization");
                httpclient.DefaultRequestHeaders.Add("Authorization", "Bearer " + token);

                var response2 = await httpclient.GetAsync("UserMaintenance/getUserRole");

                if (response2.IsSuccessStatusCode)
                {
                    var role = await response2.Content.ReadAsStringAsync();

                    _auth.SignIn(email, role);
                }
                else
                {
                    await sessionStorageService.RemoveItemAsync("token");

                    await sessionStorageService.RemoveItemAsync("email");
                }



            }

        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
        }
        finally
        {
            Hide();
        }

    }



    private async void SignOut()
    {
        email = string.Empty;
        password = string.Empty;

        await sessionStorageService.RemoveItemAsync("token");

        await sessionStorageService.RemoveItemAsync("email");
        _auth.SignOut();

        await OnHideOffcanvasClick();

    }


    private async Task SignIn()
    {

        if (String.IsNullOrEmpty(email) || String.IsNullOrWhiteSpace(email) || String.IsNullOrEmpty(password) || String.IsNullOrWhiteSpace(password))
        {
            await js.InvokeVoidAsync("showFailToast", "No Credentials entered");
            return;
        }

        try
        {
            Show();

            var myObject = JsonSerializer.Serialize(new { email = email, password = password });




            var content = new StringContent(myObject.ToString(), Encoding.UTF8, "application/json");



            var response = await httpclient.PostAsync("login", content);
            if (response.IsSuccessStatusCode)
            {
                var token = await response.Content.ReadAsStringAsync();


                tokenprovider = JsonSerializer.Deserialize<TokenProvider>(token);

                if (tokenprovider != null)
                {


                    //httpclient.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", tokenprovider.accessToken);

                    httpclient.DefaultRequestHeaders.Remove("Authorization");
                    httpclient.DefaultRequestHeaders.Add("Authorization", "Bearer " + tokenprovider.accessToken);




                    var response2 = await httpclient.GetAsync("UserMaintenance/getUserRole");

                    if (response2.IsSuccessStatusCode)
                    {
                        var role = await response2.Content.ReadAsStringAsync();

                        await sessionStorageService.SetItemAsStringAsync("email", email);

                        if (tokenprovider.accessToken != null)
                        {
                            await sessionStorageService.SetItemAsStringAsync("token", tokenprovider.accessToken);
                        }

                        _auth.SignIn(email, role);

                    }


                } 



            }
            else
            {

                var err = await response.Content.ReadAsStringAsync();

                var d = JsonSerializer.Deserialize<ErrorDetails>(err);
                if(d != null)
                {

                    await js.InvokeVoidAsync("showFailToast", $"Incorrect Credentials - {d.detail}");

                }
                else
                {
                    await js.InvokeVoidAsync("showFailToast", $"Incorrect Credentials - {err}");
                }


            }
        }
        catch (Exception e)
        {
            await js.InvokeVoidAsync("showFailToast", $"Failed to login - {e.Message}");
        }
        finally
        {
            Hide();
            ShowModal(true, false);
        }


    }


    private async Task register()
    {


        if (String.IsNullOrEmpty(email) || String.IsNullOrWhiteSpace(email) || String.IsNullOrEmpty(password) || String.IsNullOrWhiteSpace(password) || String.IsNullOrEmpty(confirmpassword) || String.IsNullOrWhiteSpace(confirmpassword))
        {
            await js.InvokeVoidAsync("showFailToast", "Credentials incomplete");
            return;
        }

        if(password != confirmpassword)
        {
            await js.InvokeVoidAsync("showFailToast", "Passwords do not match");
            return;
        }



        try
        {
            Show();

            var myObject = JsonSerializer.Serialize(new { email = email, password = password });




            var content = new StringContent(myObject.ToString(), Encoding.UTF8, "application/json");
            var response = await httpclient.PostAsync("register", content);
            if (response.IsSuccessStatusCode)
            {
                var token = await response.Content.ReadAsStringAsync();


                tokenprovider = JsonSerializer.Deserialize<TokenProvider>(token);

                if (tokenprovider != null)
                {


                    //httpclient.DefaultRequestHeaders.Add("Authorization", "Bearer " + tokenprovider.accessToken);
                    httpclient.DefaultRequestHeaders.Remove("Authorization");

                    httpclient.DefaultRequestHeaders.Add("Authorization", "Bearer " + tokenprovider.accessToken);


                    var response2 = await httpclient.GetAsync("UserMaintenance/getUserRole");

                    if (response.IsSuccessStatusCode)
                    {
                        var role   = await response2.Content.ReadAsStringAsync();


                        await sessionStorageService.SetItemAsStringAsync("email", email);


                        if (tokenprovider.accessToken != null)
                        {
                            await sessionStorageService.SetItemAsStringAsync("token", tokenprovider.accessToken);
                        }

                        _auth.SignIn(email,role);

                    }

                }

            }
            else
            {
                
                var err = await response.Content.ReadAsStringAsync();

                var d = JsonSerializer.Deserialize<ErrorDetails>(err);
                if (d != null)
                {

                    await js.InvokeVoidAsync("showFailToast", $"Registration Failed - {d.errors.ToString()}");

                }
                else
                {
                    await js.InvokeVoidAsync("showFailToast", $"Registration Failed - {err}");
                }
            }
        }
        catch (Exception)
        {
            await js.InvokeVoidAsync("showFailToast", "Registration Failed");
        }
        finally
        {
            Hide();
            ShowModal(false, false);
        }



    }



}