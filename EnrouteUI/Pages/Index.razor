@page "/"
@using EnrouteAppLibrary.Models
@using EnrouteUI.Services
@using GoogleMapsComponents
@using GoogleMapsComponents.Maps
@using System.Text.Json.Nodes
@using System.Timers
@using Majorsoft.Blazor.Components.Timer
@inject IJSRuntime JS
@inject Locations locService
@inject Users userService


<AdvancedTimer @ref="_counter" IntervalInMilisec="1000" DelayInMilisec="2000" Occurring="Times.Exactly(1)" OnIntervalElapsed="@(c => Counter(c))" />


<AdvancedTimer @ref="_counter2" IntervalInMilisec="60000" DelayInMilisec="2000" Occurring="Times.Exactly(1)" OnIntervalElapsed="@(c => Counter2(c))" />



<Offcanvas @ref="offcanvas" Placement=" Placement.Top" Size="OffcanvasSize.Large">
<BodyTemplate>

 <div class="card-body p-5 text-center">
<CascadingAuthenticationState>
    <AuthorizeView Roles="Security">

                    <div class="search-container">
                        <form class="text-center">
                            <input style="width:auto" type="text" placeholder="Find User" @bind="userLogin" name="search">
                            <i class="fa fa-search" @onclick="FindUser"></i>
                        </form>
                    </div>

    </AuthorizeView>
</CascadingAuthenticationState>
</div>
</BodyTemplate>
</Offcanvas>
<CascadingAuthenticationState>
    <AuthorizeView Roles="Security">
<i class="bi bi-arrow-down" @onclick="(async() => {await OnShowOffcanvasClick();})">Show More Items</i>
</AuthorizeView>
</CascadingAuthenticationState>
 

<!--<div class="text-center">
    <div class="form-group"><input class="form-control form-control-md" @bind="Destination" /></div>

<button class="btn btn-primary btn-sm btn-block" @onclick="AddDirections">Find Destination</button>
</div> -->
<!--
 <div class="container h-100">
<div class="d-flex justify-content-center h-100">
    <div class="search">
        <input class="search_input" @bind="Destination" type="text" name="" placeholder="Find Destination">
        <a href="#" class="search_icon" @onclick="AddDirections"><i class="fa fa-search"></i></a>
    </div>

</div>
</div>
-->
<div class="search-container">
    <form class="text-center">
        <input style="width:auto" type="text" placeholder="Find Destination" @bind="Destination" name="search">
        <i class="fa fa-search" @onclick="AddDirections"></i>
    </form>
</div>
<br/>
<GoogleMap @ref="@_map1" Id="map1" Options="@_mapOptions" OnAfterInit="@(async () => await OnAfterInitAsync())"></GoogleMap>
<button @onclick="Recenter">Re-center to my Location</button>

<CascadingAuthenticationState>
    <AuthorizeView Roles="Security">
        
        @if (RoutingMode)
        {
            <button @onclick="(async () => {ShowModals(true,true);})">Edit Buidling</button>
        }
        else
        {
            <button @onclick="(async () => {ShowModals(true,true);})">Add Buidling</button>
        }
     
    </AuthorizeView>
    </CascadingAuthenticationState>


@if (RoutingMode)
{
    <button @onclick="Reroute">ReRoute</button>
    <button @onclick="RemoveRoute">Remove Route</button>


    <p>
        Duration: @_durationTotalString <br />
        Distance: @_distanceTotalString <br />
    </p>

}

<!--<button @onclick="RemoveMarker">Remove marker</button>
<button @onclick="Recenter">Re-center marker</button>
@if(_markers.Any())
{
<br/>

<text>Label: </text>

<input type="text" value="@_labelText" @onchange="UpdateLabelText" />
<br />
}
<button @onclick="ToggleLabelFontWeight">Toggle label font-weight</button>
<button @onclick="InvokeClustering">Invoke map cluster</button>
<button @onclick="@ClearClustering">Clear cluster</button> -->



<!--<MapEventList @ref="@_eventList" Events="@_events"></MapEventList>-->
@if (Showbldg)
{
    <div class="loading">

        <!--<div Class="spinner">

        <div>
        Email:<input @bind="email" />
        </div>
        <div>
        Password:   <input type="password" @bind="password" />
        </div>
        <div>
        <button @onclick="SignIn">Sign in</button>
        </div>

        <div>
        <button @onclick="(() => {ShowModal(true,false);})">Cancel</button>
        </div>

        </div> -->


        <div class="container py-5 h-100">
            <div class="row d-flex justify-content-center align-items-center h-100">
                <div class="col-12 col-md-8 col-lg-6 col-xl-5">
                    <div class="card shadow-2-strong" style="border-radius: 1rem;">
                        <div class="card-body p-5 text-center">

                            @if (RoutingMode)
                            {
                                <h3 class="mb-5">Edit Building</h3>
                            }
                            else{

                                <h3 class="mb-5">Add Building</h3>
                            }
                            

                            <div data-mdb-input-init class="form-outline mb-4">
                                <input @bind="bldgName" id="typeEmailX-2" class="form-control form-control-lg" />
                                <label class="form-label" for="typeEmailX-2">Name</label>
                            </div>

                            <div data-mdb-input-init class="form-outline mb-4">
                                <input @bind="bldgDesc" id="typeEmailX-2" class="form-control form-control-lg" />
                                <label class="form-label" for="typeEmailX-2">Description</label>
                            </div>

                            <div data-mdb-input-init class="form-outline mb-4">
                                <input @bind="bldglat" id="typeEmailX-2" class="form-control form-control-lg" />
                                <label class="form-label" for="typeEmailX-2">Latitude</label>
                            </div>

                            <div data-mdb-input-init class="form-outline mb-4">
                                <input @bind="bldglong" id="typeEmailX-2" class="form-control form-control-lg" />
                                <label class="form-label" for="typeEmailX-2">Longitude</label>
                            </div>


                            <button data-mdb-button-init data-mdb-ripple-init class="btn btn-primary btn-lg btn-block" @onclick="AddBulding" type="submit">Submit</button>

                            <button data-mdb-button-init data-mdb-ripple-init class="btn btn-secondary btn-lg btn-block" @onclick="UseCurrentLocation" type="button">Use Current Location</button>

                            <button data-mdb-button-init data-mdb-ripple-init class="btn btn-danger btn-lg btn-block" @onclick="(async () => {ShowModals(true,false);})" type="submit">Cancel</button>


                        </div>
                    </div>
                </div>
            </div>
        </div>

    </div>


}


@if (visible)
{
    <div class="loading">

        <div Class="spinner">

            <Spinner Type="SpinnerType.Border" Size="SpinnerSize.ExtraLarge" />

        </div>

    </div>
}








@functions {


    [CascadingParameter]
    private Task<AuthenticationState>? authenticationState { get; set; }

    private bool visible = false;

    private string? bldgName = string.Empty;

    private string? bldgDesc = string.Empty;


    private decimal? bldglong;


    private decimal? bldglat;



    private int? bldgId;

    private void Show()
    {
        visible = true;
    }

    private void Hide()
    {
        visible = false;
    }

    private Offcanvas offcanvas = default!;

    private async Task OnShowOffcanvasClick()
    {
        await offcanvas.ShowAsync();
        Hide();
    }

    private async Task OnHideOffcanvasClick()
    {

        await offcanvas.HideAsync();

    }

    private GoogleMap _map1 = default!;

    private MapOptions _mapOptions = default!;

    private readonly List<Marker> _markers = new List<Marker>();


    private readonly List<Marker> Mylocations = new List<Marker>();

    private readonly List<String> _events = new List<String>();

    private List<Location> locations = new List<Location>();

    private List<Building> buildings = new List<Building>();

    // private MapEventList _eventList = default!;

    private string _labelText = "";

    private MarkerClustering _markerClustering = default!;

    private DirectionsRenderer dirRend = default!;
    private string? _durationTotalString;
    private string? _distanceTotalString;

    private string? Destination;

    private string? userLogin;

    private bool RoutingMode = false;

    private Marker? MyLocation = null;

    public Timer? timer = null;

    public string? currentRoutedDestination;

    private bool addingMarker = true;

    private bool Showbldg = false;

    private AdvancedTimer _counter = new();

    private AdvancedTimer _counter2 = new();
    //private ulong _count = 0;
    private async void Counter(ulong count)
    {
        await ReloadLocation(false);
        CounterReset();

    }

    private async void Counter2(ulong count)
    {
        await SetUserLocationHistory();
        Counter2Reset();

    }
    private void CounterReset() => _counter.Reset();

    private void Counter2Reset() => _counter2.Reset();

    private void AddBuldingShow() => ShowModals(true, true);


    private void ShowModals(bool bldg, bool show)
    {
        if (!show)
        {

            clearModal();

        }


        if (bldg)
        {
            Showbldg = show;

            var b = buildings.Where(a => a.Name == currentRoutedDestination).First();

            bldgId = b.Id;

            bldgName = b.Name;

            bldgDesc = b.Description;

            bldglong = b.Longitude;


            bldglat = b.Latitude;

        }

    }


    private void clearModal()
    {

        bldgId = null;

        bldgName = string.Empty;

        bldgDesc = string.Empty;


        bldglong = null;


        bldglat = null;


    }


    private async void UseCurrentLocation()
    {
        var currentlocation = await GetLocation();

        if(currentlocation != null)
        {

            bldglong = Convert.ToDecimal(currentlocation.Lng);


            bldglat = Convert.ToDecimal(currentlocation.Lat);

        }


    }



    protected override async void OnInitialized()
    {


        _mapOptions = new MapOptions()
            {
                Zoom = 20,
                Center = new LatLngLiteral()
                {
                    Lat = 18.0181764,
                    Lng = -76.7435785
                },
                MapTypeId = MapTypeId.Roadmap,
                ClickableIcons = false,


            };

        await Recenter();



        /*timer = new Timer(new TimerCallback(_ =>
        {

        InvokeAsync(async () =>
        {
        await ReloadLocation(false);

        });
        }), null, 1000, 1000);


        if (authenticationState != null)
        {
        var authState = await authenticationState;
        var user = authState?.User;

        if (user?.Identity != null && user.Identity.IsAuthenticated)
              {
              var locationHistoryTimer = new Timer(new TimerCallback(_ =>
       {

       InvokeAsync(async () =>
       {
       await ReloadLocation(false);

       });
       }), null, 600000, 500);
    }
    } */


        await LoadDBMarkers();





    }




    private async Task OnAfterInitAsync()
    {
        //Create instance of DirectionRenderer
        dirRend = await DirectionsRenderer.CreateAsync(_map1!.JsRuntime, new DirectionsRendererOptions()
            {
                Map = _map1.InteropObject
            });
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await Task.Run(() => addingMarker = false);
    }



    private async Task AddMarker(LatLngLiteral location,string? name = "Name", string? description = "Description")
    {
        var currLocation = location;

        //var position = await _map1.InteropObject.GetCenter();

        var position = currLocation;

        var marker = await Marker.CreateAsync(_map1.JsRuntime,
            new MarkerOptions()
                {
                    Position = position,
                    Map = _map1.InteropObject,
                    Label = new MarkerLabel { Text = $"{name}", FontWeight = "bold" },
                    Draggable = false,
                    Icon = new GoogleMapsComponents.Maps.Icon()
                    {
                        Url = name == "MyLocation"?"https://www.freeiconspng.com/uploads/file-person-icon-black-01-svg-6.png":"https://developers.google.com/maps/documentation/javascript/examples/full/images/beachflag.png",
                        ScaledSize = new GoogleMapsComponents.Maps.Size() { Height = 36, Width = 36 }
                    },
                    Title = $"{name}"
                    //Icon = "https://developers.google.com/maps/documentation/javascript/examples/full/images/beachflag.png"
                }); /*:
    new MarkerOptions()
    {
    Position = await _map1.InteropObject.GetCenter(),
    Map = _map1.InteropObject,
    Label = $"Test {_markers.Count()}",
    Draggable=true,
    Icon = new Icon()
    {
    Url = "https://developers.google.com/maps/documentation/javascript/examples/full/images/beachflag.png"
    }
    //Icon = "https://developers.google.com/maps/documentation/javascript/examples/full/images/beachflag.png"
    }); */


        var icon = await marker.GetIcon();

        Console.WriteLine($"Get icon result type is : {icon.Value.GetType()}");

        icon.Switch(
            s => Console.WriteLine(s),
            i => Console.WriteLine(i.Url),
            _ => { });

        if (name == "MyLocation")
        {
            MyLocation = marker;

            Mylocations.Add(marker);
        }
        else
        {
            _markers.Add(marker);
        }

        _labelText = await marker.GetLabelText();

        if(description != "")
        {
            var infoWindow = await InfoWindow.CreateAsync(_map1.JsRuntime, new InfoWindowOptions()
                {
                    Position = position,
                    Content = $"{description}"
                });

            await marker.AddListener<MouseEvent>("click", async e =>
    {
        await infoWindow.SetPosition(position);
        await infoWindow.Open(_map1.InteropObject);
        await e.Stop();
        string markerLabelText = await marker.GetLabelText();
        _events.Add("click on " + markerLabelText);
        Destination = name;
        StateHasChanged();




    });

        }



    }

    private async Task RemoveMarker(string labelName)
    {
        if (!_markers.Any())
        {
            return;
        }
        foreach (var m in _markers)
        {
            var labelname = await m.GetLabelMarkerLabel();


            if (labelname.Text.Contains(labelName))
            {

                await m.SetMap(null);

                _markers.Remove(m);

            }
        }
        //


        //_labelText = _markers.Any() ? await _markers.First().GetLabelText() : "";
    }

    private async Task SetUserLocationHistory()
    {

        var currentLocation = await GetLocation();

        if(currentLocation != null)
        {

            userService.setUserLocation(currentLocation);
        }




    }


    private async Task ReloadLocation(bool? recentermap = true)
    {
        if (Mylocations.Count() > 1)
        {
            var markers = Mylocations;


            foreach (var marker in markers)
            {
                await marker.SetMap(null);
                MyLocation = null;
            }
        }



        if (MyLocation != null)
        {
            await MyLocation.SetMap(null);
            MyLocation = null;
        }
        var currentLocation = await GetLocation();
        if (!addingMarker)
        {
            addingMarker = true;
            await AddMarker(currentLocation, "MyLocation", "");
            addingMarker = false;
        }


        if (recentermap == true)
        {
            await _map1.InteropObject.SetCenter(currentLocation);
            await _map1.InteropObject.SetZoom(20);
        }



    }


    private async Task Recenter()
    {

        await ReloadLocation();


    }





    private async Task UpdateLabelText(ChangeEventArgs e)
    {
        if (!_markers.Any())
        {
            return;
        }

        string newLabelText = e.Value?.ToString() ?? "";
        if (_labelText != newLabelText)
        {
            _labelText = newLabelText;

            var lastMarker = _markers.First();
            await lastMarker.SetLabelText(_labelText);
        }
    }

    private async Task ToggleLabelFontWeight()
    {
        if (!_markers.Any())
        {
            return;
        }

        var lastMarker = _markers.First();
        var lastMarkerLabel = await lastMarker.GetLabelMarkerLabel();
        lastMarkerLabel.FontWeight = (lastMarkerLabel.FontWeight == "bold") ? "normal" : "bold";
        await lastMarker.SetLabel(lastMarkerLabel);
    }

    private async Task ClearClustering()
    {
        await _markerClustering.ClearMarkers();
    }

    private async Task InvokeClustering()
    {
        var coordinates = new List<LatLngLiteral>()
            {
                new LatLngLiteral() { Lng = 147.154312, Lat = -31.56391 },
                new LatLngLiteral() { Lng = 150.363181, Lat = -33.718234 },
                new LatLngLiteral() { Lng = 150.371124,Lat =  -33.727111 },
                new LatLngLiteral() { Lng = 151.209834,Lat =  -33.848588 },
                new LatLngLiteral() { Lng = 151.216968,Lat =  -33.851702 },
                new LatLngLiteral() { Lng = 150.863657,Lat =  -34.671264 },
                new LatLngLiteral() { Lng = 148.662905,Lat =  -35.304724 },
                new LatLngLiteral() { Lng = 175.699196,Lat =  -36.817685 },
                new LatLngLiteral() { Lng = 175.790222,Lat =  -36.828611 },
                new LatLngLiteral() { Lng = 145.116667,Lat =  -37.75 },
                new LatLngLiteral() { Lng = 145.128708,Lat =  -37.759859 },
                new LatLngLiteral() { Lng = 145.133858,Lat =  -37.765015 },
                new LatLngLiteral() { Lng = 145.143299,Lat =  -37.770104 },
                new LatLngLiteral() { Lng = 145.145187,Lat =  -37.7737 },
                new LatLngLiteral() { Lng = 145.137978,Lat =  -37.774785 },
                new LatLngLiteral() { Lng = 144.968119,Lat =  -37.819616 },
                new LatLngLiteral() { Lng = 144.695692,Lat =  -38.330766 },
                new LatLngLiteral() { Lng = 175.053218,Lat =  -39.927193 },
                new LatLngLiteral() { Lng = 174.865694,Lat =  -41.330162 },
                new LatLngLiteral() { Lng = 147.439506,Lat =  -42.734358 },
                new LatLngLiteral() { Lng = 147.501315,Lat =  -42.734358 },
                new LatLngLiteral() { Lng = 147.438,Lat =  -42.735258 },
                new LatLngLiteral() { Lng = 170.463352,Lat =  -43.999792 },
            };

        var markers = await GetMarkers(coordinates, _map1.InteropObject);

        // If adding a clustering event listener, initialize markerclustering with an empty marker list
        // Clustering happens immediately upon adding markers, so including markers with the init
        // creates a race condition with JSInterop adding a listener. If not adding a listener, pass markers
        // to CreateAsync to eliminate the latency of a second JSInterop call to AddMarkers.
        _markerClustering = await MarkerClustering.CreateAsync(_map1.JsRuntime, _map1.InteropObject, markers);



        LatLngBoundsLiteral? boundsLiteral = new LatLngBoundsLiteral(new LatLngLiteral() { Lat = coordinates.First().Lat, Lng = coordinates.First().Lng });
        foreach (var literal in coordinates)
        {
            LatLngBoundsLiteral.CreateOrExtend(ref boundsLiteral, literal);
        }

        await _map1.InteropObject.FitBounds(boundsLiteral, OneOf.OneOf<int, GoogleMapsComponents.Maps.Coordinates.Padding>.FromT0(1));
    }

    private async Task<IEnumerable<Marker>> GetMarkers(IEnumerable<LatLngLiteral> coords, Map map)
    {
        var result = new List<Marker>(coords.Count());
        foreach (var latLngLiteral in coords)
        {
            var marker = await Marker.CreateAsync(_map1.JsRuntime, new MarkerOptions()
                {
                    Position = latLngLiteral,
                    Map = map,
                    Label = $"Test {result.Count() + 1}",
                    //Icon = new Icon()
                    //{
                    //    Url = "https://developers.google.com/maps/documentation/javascript/examples/full/images/beachflag.png"
                    //}
                    //Icon = "https://developers.google.com/maps/documentation/javascript/examples/full/images/beachflag.png"
                });
            result.Add(marker);
        }
        return result;
    }


    private async Task RemoveRoute()
    {

        RoutingMode = false;
        await dirRend.SetMap(null);

        _durationTotalString = null;
        _distanceTotalString = null;

        currentRoutedDestination = null;
   
        clearModal();

    }



    private async Task addDirection(LatLngLiteral dest)
    {
        await RemoveRoute();
        var currentLocation = await GetLocation();

        RoutingMode = true;

        _durationTotalString = null;
        _distanceTotalString = null;
        if (await dirRend.GetMap() is null) await dirRend.SetMap(_map1!.InteropObject);

        //Adding a waypoint
        //var waypoints = new List<DirectionsWaypoint>();
        //waypoints.Add(new DirectionsWaypoint() { Location = "Bethlehem, PA", Stopover = true });

        //Direction Request
        DirectionsRequest dr = new DirectionsRequest();
        dr.Origin = currentLocation;
        dr.Destination = dest;
        //dr.Waypoints = waypoints;
        dr.TravelMode = TravelMode.Walking;

        //Calculate Route
        var directionsResult = await dirRend.Route(dr);
        if (directionsResult != null)
        {
            foreach (var route in directionsResult.Routes.SelectMany(x => x.Legs))
            {
                _durationTotalString += route.Duration.Text;
                _distanceTotalString += route.Distance.Text;
            }
        }
    }




    private async Task<LatLngLiteral> GetLocation()
    {
        var result = await JS.InvokeAsync<LatLngLiteral>("getCoords");





        return result;




    }

    private async Task LoadDBMarkers()
    {

        foreach (var m in _markers)
        {
            await m.SetMap(null);
        }




        locations = new List<Location>();

        buildings = new List<Building>();

        locations.AddRange(await locService.getlLocations());

        buildings.AddRange( await locService.getBuildings());



        /*foreach(var loc in locations)
        {
        var building = buildings.Where(a => a.Id == loc.BuildingId).FirstOrDefault();

            if(building != null)
            {
            var latlong = new LatLngLiteral() { Lat = Convert.ToDouble(building.Latitude), Lng = Convert.ToDouble(building.Longitude) };


                if (loc.Name != null)
                {
                //await RemoveMarker(loc.Name);
                if (!_markers.Where(a => a.GetPosition().Result.Lat == latlong.Lat && a.GetPosition().Result.Lng == latlong.Lng).Any())
                    {

                    await AddMarker(latlong, building.Name, building.Description);
            }
            }


            }
            */

        foreach(var bldg in buildings)
        {
            var latlong = new LatLngLiteral() { Lat = Convert.ToDouble(bldg.Latitude), Lng = Convert.ToDouble(bldg.Longitude) };
            await AddMarker(latlong, bldg.Name, bldg.Description);
        }



    }


    private async Task AddDirections()
    {
        if(String.IsNullOrEmpty(Destination) || String.IsNullOrWhiteSpace(Destination))
        {
            await JS.InvokeVoidAsync("showFailToast", "Destination has not been entered");
            return;
        }


        var bldg = buildings.Where(a => a.Name.ToLower().Trim() == Destination.ToLower().Trim()).FirstOrDefault();

        if (bldg != null)
        {
            var latlong = new LatLngLiteral() { Lat = Convert.ToDouble(bldg.Latitude), Lng = Convert.ToDouble(bldg.Longitude) };

            bldgName = bldg.Name;
            bldgDesc = bldg.Description;
            bldglat =  bldg.Latitude;
            bldglong = bldg.Longitude;
            bldgId = bldg.Id;

            await addDirection(latlong);

            currentRoutedDestination = Destination;

            return;
        }



        var loc = locations.Where(a => a.Name?.ToLower().Trim() == Destination.ToLower().Trim()).FirstOrDefault();



        if(loc != null)
        {
            var building = buildings.Where(a => a.Id == loc.BuildingId).FirstOrDefault();

            if (building != null)
            {
                var latlong = new LatLngLiteral() { Lat = Convert.ToDouble(building.Latitude), Lng = Convert.ToDouble(building.Longitude) };

                await addDirection(latlong);

                currentRoutedDestination = Destination;
            }
        }

        if(loc == null)
        {
            await JS.InvokeVoidAsync("showFailToast", "Destination could not be found");
        }
    }


    private async Task Reroute()
    {
        if (String.IsNullOrEmpty(currentRoutedDestination) || String.IsNullOrWhiteSpace(currentRoutedDestination))
        {
            await JS.InvokeVoidAsync("showFailToast", "Destination has not been entered");
            return;
        }

        var bldg = buildings.Where(a => a.Name.ToLower().Trim() == currentRoutedDestination.ToLower().Trim()).FirstOrDefault();

        if (bldg != null)
        {
            var latlong = new LatLngLiteral() { Lat = Convert.ToDouble(bldg.Latitude), Lng = Convert.ToDouble(bldg.Longitude) };

            await addDirection(latlong);


            return;
        }




        var loc = locations.Where(a => a.Name?.ToLower().Trim() == currentRoutedDestination.ToLower().Trim()).FirstOrDefault();



        if (loc != null)
        {
            var building = buildings.Where(a => a.Id == loc.BuildingId).FirstOrDefault();

            if (building != null)
            {
                var latlong = new LatLngLiteral() { Lat = Convert.ToDouble(building.Latitude), Lng = Convert.ToDouble(building.Longitude) };

                await addDirection(latlong);

            }
        }

        if (loc == null)
        {
            await JS.InvokeVoidAsync("showFailToast", "Destination could not be found");
        }
    }

    private async Task FindUser()
    {
        try
        {
            Show();
            if (String.IsNullOrEmpty(userLogin) || String.IsNullOrWhiteSpace(userLogin))
            {
                await JS.InvokeVoidAsync("showFailToast", "User Details has not been entered");
                return;
            }

            var loc = await userService.getUserLocation(userLogin);


            if (loc == null)
            {
                await JS.InvokeVoidAsync("showFailToast", "No User Location Data found");
                return;
            }


            var latlong = new LatLngLiteral() { Lat = Convert.ToDouble(loc.Latitude), Lng = Convert.ToDouble(loc.Longitude) };

            await addDirection(latlong);
        }
        catch (Exception e)
        {
            await JS.InvokeVoidAsync("showFailToast", $"User Location could not be found - {e.Message}");

        }
        finally
        {

            Hide();
        }


            
        

    }


    private async Task AddBulding()
    {
        try
        {
            Show();
            if (String.IsNullOrEmpty(bldgName) || String.IsNullOrWhiteSpace(bldgName) || String.IsNullOrEmpty(bldgDesc) || String.IsNullOrWhiteSpace(bldgDesc) || bldglat == null ||  bldglong == null)
            {
                await JS.InvokeVoidAsync("showFailToast", "Parameters Incomplete");
                return;
            }

            var buidling = new Building() { Name = bldgName, Description = bldgDesc, Latitude = bldglat.Value, Longitude = bldglong.Value };


            if(bldgId != null)
            {
                buidling.Id = bldgId.Value;
            }


            await locService.setBuilding(buidling);



            await LoadDBMarkers();

            StateHasChanged();



        }
        catch (Exception e)
        {
            await JS.InvokeVoidAsync("showFailToast", $"Buidling could not be created - {e.Message}");

        }
        finally
        {

            ShowModals(true, false);
            Hide();
        }





    }

}